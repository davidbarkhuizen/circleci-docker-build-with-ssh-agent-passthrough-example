#!/usr/bin/env bash

zsh=false
if [ "${SHELL}" = "/bin/zsh" ]; then
   zsh=true
fi

dockerfile_path=""
image_name=""
image_tag=""
container_name=""
ssh_key_file_path=""

function load_config_from_file {
    config_file_path=$1

    # expected file format: line-separated key=value pairs
    # values do not need to be quoted
    # e.g
    #
    # image_name=cimg_py27

    while read -r line; do
        key=${line%%=*}
        value=${line#*=}

        case $key in 

            "dockerfile_path")
                dockerfile_path=$value
            ;;

            "image_name")
                image_name=$value
            ;;

            "image_tag")
                image_tag=$value
            ;;

            "container_name")
                container_name=$value
            ;;

            "ssh_key_file_path")
                ssh_key_file_path=$value
            ;;
        esac
    done < "$config_file_path"
}

function configure_buildkit {

    export DOCKER_BUILDKIT=1;
    export BUILDKIT_PROGRESS=plain;
}

function build {

    configure_buildkit

    cmd="docker build -f $dockerfile_path --tag $image_name:$image_tag --no-cache"

    if [ "$ssh_key_file_path" != "" ]; then
        cmd+=" --ssh default=$ssh_key_file_path"
    fi

    cmd+=" ."
    echo $cmd
    eval $cmd
}

function bash {
    docker exec -it $container_name /bin/sh;
}

function run {
    docker run \
        --name=$container_name \
        -d $image_name:$image_tag \
        # TODO
        # -v $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
        # -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
        tail -f /dev/null
}

function kill {
    docker stop $container_name;
    docker rm $container_name;
}

function usage {
    echo "./dkr build|run|bash|kill"
}

load_config_from_file "dkr.config"

case $1 in 

    "build")
        build
    ;;

    "run")
        run
    ;;

    "kill")
        kill
    ;;

    "bash")
        bash
    ;;

    *)
        usage
    ;;
esac